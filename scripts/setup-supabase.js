const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.log('Assurez-vous que ces variables sont d√©finies dans .env.local :')
  console.log('- NEXT_PUBLIC_SUPABASE_URL')
  console.log('- SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupSupabase() {
  console.log('üöÄ Configuration de Supabase...')

  try {
    // Test de connexion
    console.log('üîó Test de connexion √† Supabase...')
    const { data, error } = await supabase.from('_test').select('*').limit(1)
    if (error && error.code !== 'PGRST116') {
      throw error
    }
    console.log('‚úÖ Connexion Supabase OK')

    // Lecture et ex√©cution du sch√©ma SQL
    console.log('üìã Cr√©ation des tables...')
    const schemaPath = path.join(__dirname, '../supabase/schema.sql')
    
    if (fs.existsSync(schemaPath)) {
      const schema = fs.readFileSync(schemaPath, 'utf8')
      
      // Diviser le sch√©ma en commandes individuelles
      const commands = schema
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))

      for (const command of commands) {
        if (command.trim()) {
          try {
            console.log(`Ex√©cution: ${command.substring(0, 50)}...`)
            const { error } = await supabase.rpc('exec_sql', { query: command })
            if (error && !error.message.includes('already exists')) {
              console.warn(`‚ö†Ô∏è  Warning: ${error.message}`)
            }
          } catch (err) {
            if (!err.message.includes('already exists')) {
              console.warn(`‚ö†Ô∏è  Warning: ${err.message}`)
            }
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è  Sch√©ma SQL non trouv√©, cr√©ation des tables de base...')
      
      // Cr√©er les tables essentielles directement
      await createEssentialTables()
    }

    // Cr√©er un utilisateur admin
    console.log('üë§ Cr√©ation de l\'utilisateur admin...')
    await createAdminUser()

    console.log('‚úÖ Configuration Supabase termin√©e!')
    console.log('')
    console.log('üìã Informations de connexion:')
    console.log('üåê URL: http://localhost:3002/auth/signin')
    console.log('üìß Email: admin@sci-triomphe.com')
    console.log('üîë Mot de passe: admin123')

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
    process.exit(1)
  }
}

async function createEssentialTables() {
  // Fonction pour cr√©er les tables directement via l'API Supabase
  console.log('Cr√©ation manuelle des tables essentielles...')
  
  // Cette approche n√©cessiterait d'utiliser l'API SQL de Supabase
  // Pour l'instant, on va indiquer √† l'utilisateur comment proc√©der
  console.log('‚ö†Ô∏è  Veuillez ex√©cuter manuellement le sch√©ma SQL dans votre dashboard Supabase')
}

async function createAdminUser() {
  try {
    // V√©rifier si l'admin existe d√©j√†
    const { data: existingAdmin } = await supabase.auth.admin.listUsers()
    const adminExists = existingAdmin.users.some(user => user.email === 'admin@sci-triomphe.com')

    if (adminExists) {
      console.log('‚úÖ Utilisateur admin existe d√©j√†')
      return
    }

    // Cr√©er l'utilisateur admin
    const { data: newUser, error } = await supabase.auth.admin.createUser({
      email: 'admin@sci-triomphe.com',
      password: 'admin123',
      email_confirm: true,
      user_metadata: {
        first_name: 'Admin',
        last_name: 'SCI Triomphe',
        role: 'admin'
      }
    })

    if (error) {
      throw error
    }

    console.log('‚úÖ Utilisateur admin cr√©√©:', newUser.user.email)

    // Ajouter les m√©tadonn√©es utilisateur dans une table personnalis√©e si n√©cessaire
    const { error: profileError } = await supabase
      .from('profiles')
      .upsert({
        id: newUser.user.id,
        email: newUser.user.email,
        first_name: 'Admin',
        last_name: 'SCI Triomphe',
        role: 'admin',
        is_active: true
      })

    if (profileError && !profileError.message.includes('does not exist')) {
      console.warn('‚ö†Ô∏è  Profil non cr√©√©:', profileError.message)
    }

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation admin:', error.message)
  }
}

setupSupabase()